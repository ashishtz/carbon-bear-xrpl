import { redirect, type DataFunctionArgs } from '@remix-run/node'
import { useLoaderData, useFetcher } from '@remix-run/react'
import invariant from 'tiny-invariant'
import { requireAuthenticated } from '~/utils/auth.server'
import { Button } from '~/utils/forms'
import { useForm } from '@conform-to/react'

import {
	claimPurchase,
	findProduct,
} from '~/utils/resource.server'
import { getSession } from '~/utils/session.server'
import { useState } from 'react'

export async function loader({ request, params }: DataFunctionArgs) {
	await requireAuthenticated(request)
	invariant(params.productId, 'Missing username')
	const product = findProduct(params.productId)
	if (!product) {
		return redirect('/products')
	}

	const session = await getSession(request.headers.get('cookie'))
	const { sessionId } = session.data

	return { product, accountId: sessionId }
}

export async function action({ request }: DataFunctionArgs) {
	const formData = await request.clone().formData()
	const productId = formData.get('productId')
	const response = {
		status: 'error',
		message: '',
	}

	if (!productId) {
		response.message =
			'Something went wrong while selecting a product. Please try again.'
	}

	const product = findProduct(String(productId))

	if (!product) {
		response.message = 'This product does not exist in our record.'
	}

	const session = await getSession(request.headers.get('cookie'))
	const { sessionId } = session.data

	const claim = await claimPurchase(product!, sessionId)

	if (!claim) {
		response.message =
			'Something went wrong. Can not make transaction at the moment.'
	}
	response.status = 'success'
	response.message = `Your purchase claim is passed. You have received ${product?.carbon} Carbon Bear tokens`
	return response
}

const ProductDetails = () => {
	const data = useLoaderData<typeof loader>()
	const { product, accountId } = data;
	const claimFetcher = useFetcher<typeof action>()
	const [showDesc, setShowDesc] = useState(false)

	const [claimForm] = useForm({
		id: 'inline-claim',
		shouldRevalidate: 'onBlur',
	})

	return (
		<>
			<div className="px-4 py-8">
				<span
					onClick={() => {
						setShowDesc(prev => !prev)
					}}
					className="cursor-pointer text-lg text-white"
					title="Page Information"
				>
					&#9432; Page Explaination
				</span>
				{showDesc && (
					<div className="container mx-auto">
						<p className="mb-6 mt-4">
							Welcome to the Product Detail page, where you can explore the
							unique features and environmental benefits of a specific product.
							Here, you will find a comprehensive description of the product, as
							well as information about its significant contribution to carbon
							reduction.
						</p>
						<p className="mb-6">
							To accurately measure the carbon reduction achieved by the
							product, we compare its carbon emissions to the average emissions
							of similar products over a year. For instance, let's take the
							example of a Tesla car. The carbon savings associated with owning
							a Tesla are calculated by comparing its annual carbon emissions to
							those of an average gas-powered car. A credit is then issued based
							on the difference between the two, acknowledging the substantial
							environmental impact of choosing a more sustainable option.
						</p>
						<p className="mb-6">
							While the carbon savings calculation is currently static for
							demonstration purposes, we have exciting plans for the future. We
							aim to establish a connection with users' Tesla accounts, enabling
							us to provide monthly rewards based on their actual carbon
							reduction achievements. Additionally, we will introduce a feature
							that allows users to upload proof of purchase, which will be
							meticulously verified to ensure the authenticity of their claims.
						</p>
						<p className="mb-6">
							By clicking the "Claim Purchase" button, users can initiate the
							verification process, confirming their ownership of the product.
							Upon successful verification, CARBON tokens will be generated by
							our system and credited to their account. These tokens serve as a
							tangible representation of their commitment to carbon reduction
							and the positive impact they have made through their purchase.
						</p>
						<p className="mb-2 mt-8">
							We are dedicated to fostering a rewarding and transparent
							ecosystem where users are recognized for their sustainable
							choices. By verifying their purchases, users gain access to CARBON
							tokens, symbolizing their contribution to a greener future and
							incentivizing further environmentally conscious decisions.
						</p>
					</div>
				)}
			</div>
			<div className="mt-10 lg:flex p-4">
				<div>
					<div className="border flex justify-center lg:w-[30rem] xl:w-[40rem]">
						<img
							alt={product.name}
							src={product.image}
							className="max-w-full"
						/>
					</div>
				</div>
				<div className="mt-20 lg:ml-20 lg:mt-0">
					<h3 className="text-h2">{product.name}</h3>
					<div className="mt-16">
						<label className="text-h4">Carbon Reduction: </label>
						<span className="text-h5">{product.carbon} grams</span>
					</div>
					<div className="mt-12">{product.description}</div>
					<div className="mt-12">
						<p>
							You can always track your transactions{' '}
							<a
								className="font-extrabold text-blue-500"
								target="__blank"
								href={`https://testnet.xrpl.org/accounts/${accountId}`}
							>
								here
							</a>
						</p>
					</div>
					<div className="mt-12">
						<claimFetcher.Form {...claimForm.props} method="POST">
							<input type="hidden" name="productId" value={product.id} />
							<Button
								status={
									claimFetcher.state === 'submitting'
										? 'pending'
										: claimFetcher.data?.status ?? 'idle'
								}
								variant="primary"
								size="md"
								type="submit"
							>
								Claim Purchase
							</Button>
						</claimFetcher.Form>
						{!!claimFetcher.data?.message && !!claimFetcher.data?.status && (
							<div className="mt-2">
								{
									<span
										className={
											claimFetcher.data.status == 'error'
												? 'text-red-500'
												: 'text-green-500'
										}
									>
										{claimFetcher.data.message}
									</span>
								}
							</div>
						)}
					</div>
				</div>
			</div>
		</>
	)
}

export default ProductDetails
